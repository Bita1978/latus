
We have to be very careful about string/unicode representations since filenames can have
various encodings.

The strategy is to internally use unicode strings.  This way all Python routines should work.
We'll only use something different when we're external to Python.  In that case we'll convert
to a normalized canonical form.

There are two routines used for this:

  get_canon_text()   # gets the canonical text from any string/unicode string
  encode_text() # e.g. creates string so the current platform can deal with it - e.g. 'print' it

There are basically two places we have to go 'outside' of Python with filenames.

First, into the database.  We'll convert to ensure all filenames can be stored.  All comparisons
will be to this normalized canonical form.

When printing (e.g. using the Python "print" built-in function) not all filenames
that appear internally can be printed (can get an encoding error).  So, for all printing
of filenames we have to convert to the normilized canonical form.

